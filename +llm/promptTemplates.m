classdef promptTemplates
    % PROMPTTEMPLATES System and few-shot templates for LLM prompts
    % Contains methods for generating prompts based on chat history and tools
    
    methods (Static)
        function systemPrompt = getSystemPrompt()
            % Returns the system prompt for the LLM
            systemPrompt = [...
                'You are Orion, an autonomous MATLAB + Simulink assistant. ' ...
                'You operate inside the current desktop session and use only the documented APIs ' ...
                '(add_block, add_line, set_param, sim, matlab.desktop.editor, etc.).\n\n' ...
                'You can execute actions by calling specific tools. Always return your ' ...
                'response as a valid JSON object with the following format:\n' ...
                '{\n' ...
                '  "summary": "Brief description of what you accomplished",\n' ...
                '  "tool": "tool_name",\n' ...
                '  "args": { ... tool-specific arguments ... },\n' ...
                '  "files": ["file1.m", "model1.slx", ...],\n' ...
                '  "log": ["Previous tool call 1", "Previous tool call 2", ...]\n' ...
                '}\n\n' ...
                'Think step by step about what MATLAB/Simulink functions need to be called ' ...
                'to accomplish the user''s goal. Use the available tools to execute these ' ...
                'functions programmatically.\n\n' ...
                'NEVER try to control the GUI with mouse clicks or keyboard inputs. ' ...
                'Always use the programmatic APIs provided by the tools.\n\n' ...
                'CONSTRAINTS:\n' ...
                '* Perform every change programmatically, not by GUI clicks\n' ...
                '* Tidy the diagram with Simulink.BlockDiagram.arrangeSystem\n' ...
                '* Name signals and blocks exactly as specified by the user\n' ...
                '* Keep all code in a single project folder; do not overwrite existing files unless allowed\n\n' ...
                'OUTPUT:\n' ...
                '1. For MATLAB scripts: the .m text\n' ...
                '2. For Simulink models: confirmation string with the model path, plus a PNG snapshot\n' ...
                '3. A compact log of the tool calls you executed\n' ...
                '4. If errors occur, show the MATLAB error message and your next fix plan\n\n' ...
                'ACCEPTANCE TEST:\n' ...
                'Run any necessary simulations for 1s, store outputs in the workspace variable `out`, ' ...
                'and include the first ten samples of each logged signal in your reply.\n\n' ...
                'If you need to execute custom MATLAB code, use the run_code tool.\n' ...
                'Before using add_block_safe, make sure the model is created with new_model.\n' ...
                'Always arrange the model with arrange after making structural changes.\n' ...
                'Validate your work by running simulations with sim_model when appropriate.'...
            ];
        end
        
        function prompt = buildPrompt(chatHistory, toolDescriptions)
            % Builds a complete prompt from chat history and tool descriptions
            %
            % Inputs:
            %   chatHistory - Array of structs with 'role' and 'content' fields
            %   toolDescriptions - Array of structs describing available tools
            %
            % Output:
            %   prompt - Complete structured prompt for the LLM
            
            % Build tool descriptions
            toolsText = 'Available tools:\n\n';
            
            for i = 1:length(toolDescriptions)
                tool = toolDescriptions(i);
                
                % Add tool name and description
                toolsText = [toolsText, sprintf('Tool: %s\n', tool.name)];
                toolsText = [toolsText, sprintf('Description: %s\n', tool.description)];
                
                % Add parameters if any
                if isfield(tool, 'parameters') && ~isempty(tool.parameters)
                    paramFields = fieldnames(tool.parameters);
                    
                    if ~isempty(paramFields)
                        toolsText = [toolsText, 'Parameters:\n'];
                        
                        for j = 1:length(paramFields)
                            paramName = paramFields{j};
                            toolsText = [toolsText, sprintf('  - %s: %s\n', ...
                                paramName, class(tool.parameters.(paramName)))];
                        end
                    end
                end
                
                toolsText = [toolsText, '\n'];
            end
            
            % Add example of proper response format
            toolsText = [toolsText, ...
                'Example response:\n' ...
                '{\n' ...
                '  "tool": "new_model",\n' ...
                '  "args": {"modelName": "example_model"}\n' ...
                '}\n\n'];
            
            % Combine system prompt with tools description
            try
                % Use fully qualified path to avoid namespace issues
                systemPrompt = llm.promptTemplates.getSystemPrompt();
                systemPrompt = [systemPrompt, '\n\n', toolsText];
            catch ME
                warning('MATLAB:NamespaceConflict', 'Error getting system prompt: %s', ME.message);
                % Use a simple default if the method can't be called directly
                systemPrompt = 'You are Orion, an AI assistant for MATLAB and Simulink.\n\n';
                systemPrompt = [systemPrompt, toolsText];
            end
            
            % Update first message or add if not present
            messages = {};
            
            % Add system message if not already present
            if isempty(chatHistory) || ~strcmp(chatHistory(1).role, 'system')
                messages{end+1} = struct('role', 'system', 'content', systemPrompt);
                startIdx = 1;
            else
                messages{end+1} = struct('role', 'system', 'content', systemPrompt);
                startIdx = 2;
            end
            
            % Add remaining messages from history
            for i = startIdx:length(chatHistory)
                messages{end+1} = chatHistory(i);
            end
            
            % Create final prompt structure for OpenAI API
            prompt = struct(...
                'model', 'gpt-4o', ...
                'messages', {messages}, ...
                'temperature', 0.7, ...
                'max_tokens', 2048 ...
            );
        end
        
        function fewShotExamples = getFewShotExamples()
            % Returns few-shot examples to help the LLM understand the task
            
            % Example 1: Creating a simple model with sine wave and scope
            example1 = struct(...
                'user', 'Create a Simulink model with a sine wave connected to a scope.', ...
                'assistant', jsonencode(struct(...
                    'tool', 'new_model', ...
                    'args', struct('modelName', 'sine_model'))), ...
                'observation', 'Model sine_model created and opened.', ...
                'assistant', jsonencode(struct(...
                    'tool', 'add_block_safe', ...
                    'args', struct('modelName', 'sine_model', 'blockType', 'built-in/Sine Wave', 'position', [100, 100, 160, 130]))), ...
                'observation', 'Sine Wave block added to model.', ...
                'assistant', jsonencode(struct(...
                    'tool', 'add_block_safe', ...
                    'args', struct('modelName', 'sine_model', 'blockType', 'built-in/Scope', 'position', [300, 100, 360, 130]))), ...
                'observation', 'Scope block added to model.', ...
                'assistant', jsonencode(struct(...
                    'tool', 'connect', ...
                    'args', struct('modelName', 'sine_model', 'sourcePath', 'sine_model/Sine_Wave1/1', 'destPath', 'sine_model/Scope1/1'))), ...
                'observation', 'Connected Sine Wave to Scope.', ...
                'assistant', jsonencode(struct(...
                    'tool', 'arrange', ...
                    'args', struct('modelName', 'sine_model'))), ...
                'observation', 'Model arranged for better layout.', ...
                'assistant', jsonencode(struct(...
                    'tool', 'sim_model', ...
                    'args', struct('modelName', 'sine_model', 'simTime', 10))) ...
            );
            
            % Example 2: Running MATLAB code
            example2 = struct(...
                'user', 'Generate a plot of sin(x) for x from 0 to 2*pi.', ...
                'assistant', jsonencode(struct(...
                    'tool', 'run_code', ...
                    'args', struct('codeStr', 'x = 0:0.1:2*pi; y = sin(x); plot(x, y); title(''Sine Wave''); xlabel(''x''); ylabel(''sin(x)'');'))) ...
            );
            
            % Combine examples
            fewShotExamples = {example1, example2};
        end
    end
end
