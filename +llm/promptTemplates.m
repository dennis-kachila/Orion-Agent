classdef promptTemplates
    % PROMPTTEMPLATES System and few-shot templates for LLM prompts
    % Contains methods for generating prompts based on chat history and tools
    
    methods (Static)
        function systemPrompt = getSystemPrompt()
            % Returns the system prompt for the LLM
            systemPrompt = [...
                'You are Orion, an autonomous MATLAB + Simulink assistant. ' ...
                'You operate inside the current desktop session and use only the documented APIs ' ...
                '(add_block, add_line, set_param, sim, matlab.desktop.editor, etc.).\n\n' ...
                'You can execute actions by calling specific tools. Use ONLY the tool names and arguments exactly as described in the available tools list below. ' ...
                'Never invent tool names or arguments.\n\n' ...
                'Always return your response as a valid JSON object with the following format:\n' ...
                '{\n' ...
                '  "summary": "Brief description of what you accomplished",\n' ...
                '  "tool": "tool_name",\n' ...
                '  "args": { ... tool-specific arguments ... },\n' ...
                '  "files": ["file1.m", "model1.slx", ...],\n' ...
                '  "log": ["Previous tool call 1", "Previous tool call 2", ...]\n' ...
                '}\n\n' ...
                'Think step by step about what MATLAB/Simulink functions need to be called ' ...
                'to accomplish the user''s goal. Use the available tools to execute these ' ...
                'functions programmatically.\n\n' ...
                'NEVER try to control the GUI with mouse clicks or keyboard inputs. ' ...
                'Always use the programmatic APIs provided by the tools.\n\n' ...
                'CONSTRAINTS:\n' ...
                '* Perform every change programmatically, not by GUI clicks\n' ...
                '* Tidy the diagram with auto_layout after structural changes\n' ...
                '* Name signals and blocks exactly as specified by the user\n' ...
                '* Keep all code in a single project folder; do not overwrite existing files unless allowed\n' ...
                '* Use only these tools: create_new_model, open_or_create_file, run_code_or_file, insert_library_block, connect_block_ports, auto_layout, simulate_model, open_existing_model, save_current_model, read_file_content, write_file_contents, check_code_lint, run_unit_tests, set_workspace_var, get_workspace_var, remove_block, disconnect_block_ports, close_current_model, commit_git_repo, doc_search.\n\n' ...
                'OUTPUT:\n' ...
                '1. For MATLAB scripts: the .m text\n' ...
                '2. For Simulink models: confirmation string with the model path, plus a PNG snapshot\n' ...
                '3. A compact log of the tool calls you executed\n' ...
                '4. If errors occur, show the MATLAB error message and your next fix plan\n\n' ...
                'ACCEPTANCE TEST:\n' ...
                'Run any necessary simulations for 5s by default unless specified by user, store outputs in the workspace variable `out`, ' ...
                'and include the first ten samples of each logged signal in your reply.\n\n' ...
                'If you need to execute custom MATLAB code, use the run_code_or_file tool.\n' ...
                'Before using insert_library_block, make sure the model is created with create_new_model.\n' ...
                'Always arrange the model with auto_layout after making structural changes.\n' ...
                'Validate your work by running simulations with simulate_model when appropriate.'...
            ];
        end
        
        function prompt = buildPrompt(chatHistory, toolDescriptions)
            % Builds a complete prompt from chat history and tool descriptions
            % Adds validation to handle malformed or missing fields gracefully
            
            % Build tool descriptions
            toolsText = 'Available tools:\n\n';
            if ~isstruct(toolDescriptions) || isempty(toolDescriptions)
                toolsText = [toolsText, '(No tool descriptions available)\n'];
            else
                for i = 1:length(toolDescriptions)
                    tool = toolDescriptions(i);
                    % Validate required fields
                    if ~isfield(tool, 'name') || ~isfield(tool, 'description')
                        continue; % Skip malformed tool
                    end
                    toolsText = [toolsText, sprintf('Tool: %s\n', tool.name)];
                    toolsText = [toolsText, sprintf('Description: %s\n', tool.description)];
                    % Add parameters if any
                    if isfield(tool, 'parameters') && ~isempty(tool.parameters) && isstruct(tool.parameters)
                        paramFields = fieldnames(tool.parameters);
                        if ~isempty(paramFields)
                            toolsText = [toolsText, 'Parameters:\n'];
                            for j = 1:length(paramFields)
                                paramName = paramFields{j};
                                toolsText = [toolsText, sprintf('  - %s: %s\n', paramName, class(tool.parameters.(paramName)))];
                            end
                        end
                    end
                    toolsText = [toolsText, '\n'];
                end
            end
            
            % Add example of proper response format
            toolsText = [toolsText, ...
                'Example response:\n' ...
                '{\n' ...
                '  "tool": "create_new_model",\n' ...
                '  "args": {"modelName": "example_model"}\n' ...
                '}\n\n'];
            
            % Combine system prompt with tools description
            try
                systemPrompt = llm.promptTemplates.getSystemPrompt();
                systemPrompt = [systemPrompt, '\n\n', toolsText];
            catch ME
                warning('MATLAB:NamespaceConflict', 'Error getting system prompt: %s', ME.message);
                systemPrompt = 'You are Orion, an AI assistant for MATLAB and Simulink.\n\n';
                systemPrompt = [systemPrompt, toolsText];
            end
            
            % Update first message or add if not present
            messages = {};
            
            % Validate chatHistory
            if ~isstruct(chatHistory) || isempty(chatHistory)
                chatHistory = struct('role', {}, 'content', {});
            end
            
            % Add system message if not already present
            if isempty(chatHistory) || ~isfield(chatHistory(1), 'role') || ~strcmp(chatHistory(1).role, 'system')
                messages{end+1} = struct('role', 'system', 'content', systemPrompt);
                startIdx = 1;
            else
                messages{end+1} = struct('role', 'system', 'content', systemPrompt);
                startIdx = 2;
            end
            
            % Add remaining messages from history, skipping malformed
            for i = startIdx:length(chatHistory)
                msg = chatHistory(i);
                if isfield(msg, 'role') && isfield(msg, 'content')
                    messages{end+1} = msg;
                else
                    % Optionally log or skip malformed message
                    continue;
                end
            end
            
            % Create final prompt structure for OpenAI API
            prompt = struct(...
                'model', 'gpt-4o', ...
                'messages', {messages}, ...
                'temperature', 0.7, ...
                'max_tokens', 2048 ...
            );
        end
        
        function fewShotExamples = getFewShotExamples()
            % Returns few-shot examples to help the LLM understand the task

            % Example 1: Creating a simple model with sine wave and scope
            example1 = struct(...
                'user', 'Create a Simulink model with a sine wave connected to a scope.', ...
                'assistant', jsonencode(struct(...
                    'summary', 'Created a new model named sine_model.', ...
                    'tool', 'create_new_model', ...
                    'args', struct('modelName', 'sine_model'), ...
                    'files', {{'sine_model.slx'}}, ...
                    'log', {{'create_new_model'}})), ...
                'observation', 'Model sine_model created and opened.', ...
                'assistant', jsonencode(struct(...
                    'summary', 'Inserted Sine Wave block.', ...
                    'tool', 'insert_library_block', ...
                    'args', struct('modelName', 'sine_model', 'blockType', 'built-in/Sine Wave', 'blockName', 'Sine_Wave1', 'position', [100, 100, 160, 130]), ...
                    'files', {{'sine_model.slx'}}, ...
                    'log', {{'insert_library_block'}})), ...
                'observation', 'Sine Wave block added to model.', ...
                'assistant', jsonencode(struct(...
                    'summary', 'Inserted Scope block.', ...
                    'tool', 'insert_library_block', ...
                    'args', struct('modelName', 'sine_model', 'blockType', 'built-in/Scope', 'blockName', 'Scope1', 'position', [300, 100, 360, 130]), ...
                    'files', {{'sine_model.slx'}}, ...
                    'log', {{'insert_library_block'}})), ...
                'observation', 'Scope block added to model.', ...
                'assistant', jsonencode(struct(...
                    'summary', 'Connected Sine Wave to Scope.', ...
                    'tool', 'connect_block_ports', ...
                    'args', struct('modelName', 'sine_model', 'srcBlock', 'Sine_Wave1', 'srcPort', 1, 'dstBlock', 'Scope1', 'dstPort', 1), ...
                    'files', {{'sine_model.slx'}}, ...
                    'log', {{'connect_block_ports'}})), ...
                'observation', 'Connected Sine Wave to Scope.', ...
                'assistant', jsonencode(struct(...
                    'summary', 'Arranged model layout.', ...
                    'tool', 'auto_layout', ...
                    'args', struct('modelName', 'sine_model'), ...
                    'files', {{'sine_model.slx'}}, ...
                    'log', {{'auto_layout'}})), ...
                'observation', 'Model arranged for better layout.', ...
                'assistant', jsonencode(struct(...
                    'summary', 'Simulated the model for 10 seconds.', ...
                    'tool', 'simulate_model', ...
                    'args', struct('modelName', 'sine_model', 'simTime', 10), ...
                    'files', {{'sine_model.slx'}}, ...
                    'log', {{'simulate_model'}})) ...
            );

            % Example 2: Running MATLAB code
            example2 = struct(...
                'user', 'Generate a plot of sin(x) for x from 0 to 2*pi.', ...
                'assistant', jsonencode(struct(...
                    'summary', 'Generated and plotted sin(x) for x from 0 to 2*pi.', ...
                    'tool', 'run_code_or_file', ...
                    'args', struct('codeStr', 'x = 0:0.1:2*pi; y = sin(x); plot(x, y); title(''Sine Wave''); xlabel(''x''); ylabel(''sin(x)'');'), ...
                    'files', {{}}, ...
                    'log', {{'run_code_or_file'}})) ...
            );

            % Combine examples
            fewShotExamples = {example1, example2};
        end
    end
end
